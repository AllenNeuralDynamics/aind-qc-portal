name: Tag and publish main
on:
  push:
    branches:
      - main
# Remove line 65 to enable automated semantic version bumps.
# Change line 71 from "if: false" to "if: true" to enable PyPI publishing. 
# Requires that svc-aindscicomp be added as an admin to repo.
jobs:
  update_badges:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ env.DEFAULT_BRANCH }}
        fetch-depth: 0
        token: ${{ secrets.SERVICE_TOKEN }}
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: 3.8
    - name: Install dependencies
      run: | 
        python -m pip install -e .[dev] --no-cache-dir
    - name: Get Python version and Update README.md
      run: |
        python_version=$(grep "requires-python" pyproject.toml | grep -o ">=[^\"]*")
        python_badge=$(grep -o 'python-[^)]*' README.md)
        new_python_badge="python-$python_version-blue?logo=python"
        sed -i "s/$python_badge/$new_python_badge/g" README.md
    - name: Get interrogate values and Update README.md
      run: |
        interrogate_val=$(interrogate . | grep -o 'actual: [0-9]*\.[0-9]*' | awk '{print $2}')
        interrogate_badge=$(grep -o 'interrogate-[^)]*' README.md)
        if (( $(echo "$interrogate_val >= 90.00" | bc -l) )); then
            new_interrogate_badge="interrogate-$interrogate_val%25-brightgreen"
        elif (( $(echo "$interrogate_val < 80.00" | bc -l) )); then
            new_interrogate_badge="interrogate-$interrogate_val%25-red"
        else
            new_interrogate_badge="interrogate-$interrogate_val%25-yellow"
        fi
        sed -i "s/$interrogate_badge/$new_interrogate_badge/g" README.md
    - name: Get Coverage values and Update README.md
      run: |
        coverage run -m unittest discover
        coverage_val=$(coverage report | grep "^TOTAL" | grep -o '[0-9]\+%' | grep -o '[0-9]\+')
        coverage_badge=$(grep -o "coverage-[^?]*" README.md)
        if (( $(echo "$coverage_val >= 90.00" | bc -l) )); then 
            new_coverage_badge="coverage-$coverage_val%25-brightgreen"
        elif (( $(echo "$coverage_val < 80.00" | bc -l) )); then
            new_coverage_badge="coverage-$coverage_val%25-red"
        else
            new_coverage_badge="coverage-$coverage_val%25-yellow"
        fi
        sed -i "s/$coverage_badge/$new_coverage_badge/g" README.md
    - name: Commit changes
      uses: EndBug/add-and-commit@v9
      with:
        default_author: github_actions
        message: "ci: update badges [skip actions]"
        add: '["README.md"]'
  tag:
    needs: update_badges
    if: ${{github.event.repository.name == 'aind-library-template'}}
    uses: AllenNeuralDynamics/aind-github-actions/.github/workflows/tag.yml@main
    secrets:
      SERVICE_TOKEN: ${{ secrets.SERVICE_TOKEN }}
  publish_pypi:
    needs: tag
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Pull latest changes
        run: git pull origin main
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install --upgrade setuptools wheel twine build
          python -m build
          twine check dist/*
      - name: Publish on PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.AIND_PYPI_TOKEN }}
  publish_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image and push to GitHub Container Registry
        uses: docker/build-push-action@v3
        with:
          # relative path to the place where source code with Dockerfile is located
          context: .
          push: true
          tags: ghcr.io/allenneuraldynamics/aind-qc-portal:latest
  update_ecs_service :
    runs-on: ubuntu-latest
    needs: publish_image
    permissions:
      id-token: write
      contents: read
    env:
      AWS_IAM_ROLE: ${{ secrets.AWS_IAM_ROLE_PROD }}
      AWS_REGION : ${{ vars.AWS_REGION }}
      AWS_ECS_CLUSTER : ${{ vars.AWS_ECS_CLUSTER_PROD }}
      AWS_ECS_SERVICE : ${{ vars.AWS_ECS_SERVICE_PROD }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE }}
          role-session-name: github-ecs-update-service
          aws-region: ${{ env.AWS_REGION }}
      - name: Update ECS service
        run: |
          python -m pip install awscli
          aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_SERVICE --force-new-deployment
